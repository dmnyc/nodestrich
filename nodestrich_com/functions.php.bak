<?php
// Include configuration file
require_once 'config.php';

/**
 * Fetch community data from Amboss API
 * @param string $communityId The ID of the community to fetch
 * @param string $api_key The Amboss API key
 * @param string $curlURL The Amboss GraphQL endpoint
 * @return array An array containing community data or error information
 */
function getCommunityData($communityId, $api_key, $curlURL) {
    // GraphQL query to get community data including member_list
    $communityQuery = <<<'GRAPHQL'
query GetCommunity($getCommunityId: String!) {
  getCommunity(id: $getCommunityId) {
    details {
      description
      pubId
    }
    member_count
    member_list
    community_stats {
      total_channels
      total_capacity
    }
  }
}
GRAPHQL;

    // Variables for the community query
    $communityVariables = [
        'getCommunityId' => $communityId
    ];

    // Prepare the payload for community query
    $communityPayload = json_encode([
        'query' => $communityQuery,
        'variables' => $communityVariables
    ]);

    // Initialize cURL for community query
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $curlURL);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $communityPayload);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json',
        'Content-Length: ' . strlen($communityPayload),
        "Authorization: Bearer $api_key"
    ]);

    // Execute community query
    $communityResponse = curl_exec($ch);
    if (curl_errno($ch)) {
        curl_close($ch);
        return ['error' => curl_error($ch)];
    }

    $data = json_decode($communityResponse, true);
    curl_close($ch);
    
    return $data;
}

/**
 * Fetch node aliases for a list of public keys
 * @param array $memberList List of member public keys
 * @param string $api_key The Amboss API key
 * @param string $curlURL The Amboss GraphQL endpoint
 * @return array An array containing member aliases or error information
 */
function getMemberAliases($memberList, $api_key, $curlURL) {
    // GraphQL query to get Node Alias for each pubkey
    $memberQuery = <<<'GRAPHQL'
    query getNodeAliasBatch($pubkeys: [String!]!) {
        getNodeAliasBatch(pubkeys: $pubkeys) {
            alias
            pub_key
        }
    }
GRAPHQL;

    // Variables for the NodeAliasBatch query
    $memberVariables = [
      'pubkeys' => $memberList
    ];

    // Prepare the payload for NodeAliasBatch query
    $memberPayload = json_encode([
      'query' => $memberQuery,
      'variables' => $memberVariables
    ]);

    // Initialize cURL
    $ch = curl_init();

    // Set cURL options
    curl_setopt($ch, CURLOPT_URL, $curlURL);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $memberPayload);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json',
        'Content-Length: ' . strlen($memberPayload),
        "Authorization: Bearer $api_key"
    ]);

    // Execute the request
    $memberResponse = curl_exec($ch);

    // Check for cURL execution errors
    if ($memberResponse === false) {
        $error = curl_error($ch);
        curl_close($ch);
        return ['error' => $error];
    }

    // Check the HTTP response code
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    if ($httpCode != 200) {
        curl_close($ch);
        return ['error' => "HTTP code $httpCode received"];
    }

    // Close cURL
    curl_close($ch);

    // Decode the JSON response
    $memberResult = json_decode($memberResponse, true);
    if ($memberResult === null) {
        return ['error' => json_last_error_msg()];
    }

    return $memberResult;
}

/**
 * Sort member aliases alphabetically
 * @param array $memberAliasList List of member aliases
 * @return array Sorted array of member aliases
 */
function sortMemberAliases($memberAliasList) {
    usort($memberAliasList, function($a, $b) {
        return strcmp($a['alias'], $b['alias']);
    });
    return $memberAliasList;
}
?>
